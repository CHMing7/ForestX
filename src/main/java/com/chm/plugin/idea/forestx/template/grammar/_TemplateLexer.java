/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.chm.plugin.idea.forestx.template.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_BLOCK_BEGIN;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_BLOCK_END;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_COMMA;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_DECIMAL;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_DOT;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_IDENTIFIER;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_INT;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_LPAREN;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.EL_RPAREN;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.FT_DQ;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.FT_JSTRING;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.PROP_BLOCK_BEGIN;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.PROP_BLOCK_END;
import static com.chm.plugin.idea.forestx.template.psi.TemplateTypes.PROP_REFERENCE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TemplateLexer.flex</tt>
 */
public class _TemplateLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int PROP_BLOCK = 4;
    public static final int EL_BLOCK = 6;
    /* The ZZ_CMAP_Z table has 136 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\4\2\1\3\201\2");
    /* The ZZ_CMAP_Y table has 512 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\127\3\1\4\45\3\1\5\1\6\76\3\1\4\u011f\3\20\7\20\10");
    /* The ZZ_CMAP_A table has 576 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\3\5\2\22\3\1\2\1\3\1\10\1\11\1\7\3\3\1\23\1\24\2\3\1\22\1\21\1\20\1\3" +
                    "\1\14\11\15\7\3\32\0\1\16\1\6\1\17\1\3\1\0\1\3\32\0\1\12\1\3\1\13\2\3\5\0" +
                    "\1\1\32\0\1\1\137\0\1\1\77\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0\100\4\100" +
                    "\5");
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3
    };
    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\1\1\1\2\2\3\2\1\1\4\1\5\1\1" +
                    "\1\6\1\7\2\10\1\1\1\11\2\12\1\13\1\14" +
                    "\1\15\1\16\1\17\4\0\1\7\3\0\1\20\1\5";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\25\0\52\0\77\0\124\0\124\0\151\0\176" +
                    "\0\223\0\250\0\124\0\275\0\322\0\124\0\347\0\374" +
                    "\0\u0111\0\u0126\0\124\0\u013b\0\u0150\0\124\0\124\0\124" +
                    "\0\124\0\124\0\322\0\u0165\0\u017a\0\u0126\0\u018f\0\u01a4" +
                    "\0\u01b9\0\u01ce\0\u01a4\0\u01e3";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\10\5\1\6\14\5\6\7\1\10\1\11\1\6\1\12" +
                    "\1\13\1\5\11\7\2\14\2\5\1\15\1\14\1\5" +
                    "\1\14\3\5\1\16\11\5\1\17\1\20\1\21\1\5" +
                    "\1\22\1\17\1\5\1\17\3\5\1\23\1\24\1\25" +
                    "\2\5\1\26\1\5\1\27\1\30\1\31\25\0\6\7" +
                    "\1\10\5\0\17\7\1\10\16\7\12\0\1\13\24\0" +
                    "\1\32\12\0\2\14\2\0\1\33\1\14\1\0\1\14" +
                    "\4\0\2\14\1\34\1\0\2\35\10\0\1\14\17\0" +
                    "\2\17\2\0\1\36\1\17\1\0\1\17\4\0\2\37" +
                    "\7\0\1\17\1\20\1\21\1\0\1\36\1\17\1\0" +
                    "\1\17\4\0\2\37\10\0\2\21\27\0\1\17\37\0" +
                    "\1\40\20\0\2\25\2\0\1\40\20\0\1\41\1\42" +
                    "\7\0\2\14\2\0\1\33\1\14\1\0\1\14\31\0" +
                    "\2\37\23\0\2\43\26\0\1\44\21\0\2\42\1\0" +
                    "\1\44\25\0\1\35\4\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\2\11\4\1\1\11\2\1\1\11\4\1\1\11" +
                    "\2\1\5\11\4\0\1\1\3\0\2\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _TemplateLexer() {
        this((java.io.Reader) null);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _TemplateLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates characters to character classes
     * Chosen bits are [8, 7, 6]
     * Total runtime size is 2448 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 13] << 7) | ((ch >> 6) & 0x7f)] << 6) | (ch & 0x3f)];
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[504];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[36];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 17:
                        break;
                    case 2: {
                        yybegin(STRING);
                        return FT_DQ;
                    }
                    // fall through
                    case 18:
                        break;
                    case 3: {
                        return FT_JSTRING;
                    }
                    // fall through
                    case 19:
                        break;
                    case 4: {
                        yybegin(EL_BLOCK);
                        return EL_BLOCK_BEGIN;
                    }
                    // fall through
                    case 20:
                        break;
                    case 5: {
                        return PROP_REFERENCE;
                    }
                    // fall through
                    case 21:
                        break;
                    case 6: {
                        yybegin(STRING);
                        return PROP_BLOCK_END;
                    }
                    // fall through
                    case 22:
                        break;
                    case 7: {
                        return EL_IDENTIFIER;
                    }
                    // fall through
                    case 23:
                        break;
                    case 8: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 24:
                        break;
                    case 9: {
                        yybegin(STRING);
                        return EL_BLOCK_END;
                    }
                    // fall through
                    case 25:
                        break;
                    case 10: {
                        return EL_INT;
                    }
                    // fall through
                    case 26:
                        break;
                    case 11: {
                        return EL_DOT;
                    }
                    // fall through
                    case 27:
                        break;
                    case 12: {
                        return EL_COMMA;
                    }
                    // fall through
                    case 28:
                        break;
                    case 13: {
                        return EL_LPAREN;
                    }
                    // fall through
                    case 29:
                        break;
                    case 14: {
                        return EL_RPAREN;
                    }
                    // fall through
                    case 30:
                        break;
                    case 15: {
                        yybegin(PROP_BLOCK);
                        return PROP_BLOCK_BEGIN;
                    }
                    // fall through
                    case 31:
                        break;
                    case 16: {
                        return EL_DECIMAL;
                    }
                    // fall through
                    case 32:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
